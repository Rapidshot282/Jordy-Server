
options:
	c : &6[&e시스템&6]&f
	#커맨드 펄미션
	Perm_Command: itembind.command
	
	#명령어 별칭
	Aliases_Command: 바인드, 아이템바인드, 귀속
	
	#오류메세지
	Msg_ToolIsNotSet: &6[&e시스템&6]&f &c플레이어의 &f손&c에 &b아이템&c이 없습니다. &f손&c에 &b아이템&c을 들고 다시 시도해주세요.
	Msg_AlreadyBind: &6[&e시스템&6]&f &c이미 플레이어에게 &b세이브&c 되어있는 &b아이템&c입니다.
	Msg_AlreadyUnbind: &6[&e시스템&6]&f &c플레이어에게 &b세이브&c 되어있는 &b아이템&c이 아닙니다.
	
	#귀속 성공 메세지
	Msg_BindComplete: &6[&e시스템&6]&f &b아이템&a을 세이브 하였습니다. &e7만 골드&a가 소비되었습니다.
	
	#귀속 해제 성공 메세지
	Msg_UnbindComplete: &6[&e시스템&6]&f &b아이템&a을 세이브 해제하였습니다. &e1만 골드&a가 소비되었습니다.
	
	#바인드 문구
	BindWord: &3세이브O
	
	#언바인드 문구
	UnbindWord: &4세이브X
	
	#귀속 문구가 삽입될 위치
	BindLine: 1
	
	#DB 분류 ID
	ID: itembind
	
#====================================
	
function ib_getBindWord() :: string:
	return "{@BindWord}"
	
function ib_getUnbindWord() :: string:
	return "{@UnbindWord}"
	
function ib_getBindCompleteMessage() :: string:
	return "{@Msg_BindComplete}"
	
function ib_getUnbindCompleteMessage() :: string:
	return "{@Msg_UnbindComplete}"
	
function ib_getAlreadyBindError() :: string:
	return "{@Msg_AlreadyBind}"
	
function ib_getAlreadyUnbindError() :: string:
	return "{@Msg_AlreadyUnbind}"
	
function ib_getBindLine() :: integer:
	return {@BindLine}
	
function ib_getDatabaseID() :: string:
	return "{@ID}"
	
#====================================

function ib_AddRespawnItemStorage(p:player, i:item):
	add {_i} to {{@ID}.Storage::%{_p}%::*}
	
function ib_GetRespawnItemStorage(p:player) :: items:
	return {{@ID}.Storage::%{_p}%::*}
	
function ib_DeleteRespawnItemStorage(p:player):
	delete {{@ID}.Storage::%{_p}%::*}

function ib_isToolSet(p:player) :: boolean:
	return false if tool of {_p} is air
	return true
	
function ib_isBind(p:player) :: boolean:
	set {_lore} to line {@BindLine} of lore of tool of {_p}
	return true if {_lore} is "&3세이브O"
	return false
	
function ib_Bind(p:player):
	set line {@BindLine} of lore of tool of {_p} to "{@BindWord}"
	subtract 70000 from {_p}'s money
	
function ib_Unbind(p:player):
	set line {@BindLine} of lore of tool of {_p} to "{@UnbindWord}"
	subtract 10000 from {_p}'s money
	send "{@c} 성공적으로 해당 아이템이 세이브 취소 되었습니다." to {_p}
	
function ib_cancelDrops(p:player, drop:item) :: item:
	set {_lore} to line {@BindLine} of lore of {_drop}
	if {_lore} is "{@BindWord}":
		ib_AddRespawnItemStorage({_p}, {_drop})
		return {_drop}
		
#====================================

command /invsave [<string>]:
	aliases: {@Aliases_Command}
	usage:  /invsave help
	trigger:
		if check [arg 1 is not set] or check [arg 1 is "help"] or check [arg 1 is "도움말"]:
			send ""
			send "&6ItemBind &7>> &f/invsave save - 손에 든 아이템을 &b세이브&f시킵니다. &e(가격 : 7만 골드, 잔액에서 차감)"
			send "&6ItemBind &7>> &f/invsave unsave - 손에 든 아이템을 &b세이브&f를 &c해제&f합니다. &e(가격 : 1만 골드, 잔액에서 차감)"
			send ""
			
		else if check [arg 1 is "save"] or check [arg 1 is "세이브"] or check [arg 1 is "귀속"]:
			if ib_isToolSet(player) is false:
				send "{@Msg_ToolIsNotSet}"
			else if ib_isBind(player) is true:
				send "{@Msg_AlreadyBind}"
			else:
				ib_Bind(player)
				send "{@Msg_BindComplete}"
				
		else if check [arg 1 is "unsave"] or check [arg 1 is "언세이브"] or check [arg 1 is "귀속해제"]:
			if ib_isToolSet(player) is false:
				send "{@Msg_ToolIsNotSet}"
			else if ib_isBind(player) is false:
				send "{@Msg_AlreadyUnbind}"
			else:
				ib_Unbind(player)
				send "{@Msg_UnbindComplete}"
				
#====================================	
	
on death:
	set {_drops::*} to drops
	if victim is player:
		loop {_drops::*}:
			set {_cancelDrop} to ib_cancelDrops(victim, loop-value)
			remove {_cancelDrop} from drops
		
on respawn:
	set {_drops::*} to ib_GetRespawnItemStorage(player)
	loop {_drops::*}:
		give loop-value to player
	ib_DeleteRespawnItemStorage(player)
			